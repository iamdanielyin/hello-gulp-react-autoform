"use strict";var AppDispatcher=require("../dispatcher/AppDispatcher"),ButtonActions={addNewItem:function(t){AppDispatcher.dispatch({actionType:"ADD_NEW_ITEM",text:t})}};module.exports=ButtonActions;var React=require("react"),MyButton=function(t){var e=t.items,n=e.map(function(t,e){return React.createElement("li",{key:e},t)});return React.createElement("div",null,React.createElement("ul",null,n),React.createElement("button",{onClick:t.onClick},"New Item"))};module.exports=MyButton;var React=require("react"),ListStore=require("../stores/ListStore"),ButtonActions=require("../actions/ButtonActions"),MyButton=require("./MyButton"),MyButtonController=React.createClass({displayName:"MyButtonController",getInitialState:function(){return{items:ListStore.getAll()}},componentDidMount:function(){ListStore.addChangeListener(this._onChange)},componentWillUnmount:function(){ListStore.removeChangeListener(this._onChange)},_onChange:function(){this.setState({items:ListStore.getAll()})},createNewItem:function(t){ButtonActions.addNewItem("new item")},render:function(){return React.createElement(MyButton,{items:this.state.items,onClick:this.createNewItem})}});module.exports=MyButtonController;var Dispatcher=require("flux").Dispatcher,AppDispatcher=new Dispatcher,ListStore=require("../stores/ListStore");AppDispatcher.register(function(t){switch(t.actionType){case"ADD_NEW_ITEM":ListStore.addNewItemHandler(t.text),ListStore.emitChange()}}),module.exports=AppDispatcher;var EventEmitter=require("events").EventEmitter,assign=require("object-assign"),ListStore=assign({},EventEmitter.prototype,{items:[],getAll:function(){return this.items},addNewItemHandler:function(t){this.items.push(t)},emitChange:function(){this.emit("change")},addChangeListener:function(t){this.on("change",t)},removeChangeListener:function(t){this.removeListener("change",t)}});module.exports=ListStore;